============
SimpleICPool
============

.. class:: SimpleICPool(BaseICPool)

    The top level driver that manages the overall fit to data, accounting for
    high-level parameters, such as number of components. It also (ideally) will 
    handle the management of MPIPool processes.

    :param component_class: A Class that either inherits from BaseComponent or matches the interface. This Class encapsulates the parametrisation of a single component.
    :type component_class: subclass(BaseComponent)
    :param inserter_class: A Class that either inherits from BaseInserter or matches the interface exactly. This Class handles the initialisation of the next set of models. For example, if we have just fit a collection of models with N components, `inserter_class` will generate a set of initial conditions for `N+1` components.
    :type inserter_class: subclass(BaseInserter)


    .. method:: __init__(component_class, inserter_class)

        Initialise an InitialConditionsGenerator objects.

    .. attribute:: registry

        A record of best models and associated scores from fits initialised with conditions generated by this class.

        :type: dict[key, tuple[Model, float]]

    .. method:: pool()

        Produce a pool that can be iterated over, yielding the next most promising initial conditions, along with a unique identifier.

        :return: A generator that can be iterated over, yielding the next most promising initial conditions.
        :rtype: generator

    .. method:: register_result(unique_id, model, score)

        Once a fit has converged, use this method to register its resulting model and score.

        :param unique_id: some id that was generated along with a set of initial conditions.
        :type unique_id: int
        :param model: the best fitting model corresponding to a set of initial conditions
        :type model: list[float]
        :param score: the score of the best fit model
        :type score: float

